<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>$(DefaultNetCoreTargetFramework)</TargetFrameworks>
    <TargetFrameworks Condition="'$(OS)' == 'Windows_NT'">$(TargetFrameworks);net472</TargetFrameworks>
    <DefineConstants Condition="'$(TargetFramework)' == 'net472'">$(DefineConstants);BUILD_MSI_TASKS</DefineConstants>
    <Optimize>false</Optimize>
    <DebugType>embedded</DebugType>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <!-- Need to build this project in source build -->
    <ExcludeFromSourceOnlyBuild>false</ExcludeFromSourceOnlyBuild>
    <!-- Temporarily target the previous runtime until https://github.com/dotnet/sdk/pull/14574 is merged. -->
    <TargetLatestDotNetRuntime>false</TargetLatestDotNetRuntime>
    <!-- No need to track public APIs of these MSBuild tasks. -->
    <AddPublicApiAnalyzers>false</AddPublicApiAnalyzers>
  </PropertyGroup>

  <ItemGroup>
    <!-- Explicitly reference the desired version of Newtonsoft.Json to avoid getting an older version
         from the dependency on NuGet.Packaging which would cause a source-built prebuilt. -->
    <PackageReference Include="Newtonsoft.Json" Version="$(NewtonsoftJsonVersion)" />
    <PackageReference Include="NuGet.Packaging" Version="$(NuGetPackagingVersion)" />
    <PackageReference Include="Microsoft.Extensions.DependencyModel" Version="$(MicrosoftExtensionsDependencyModelVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == '$(DefaultNetCoreTargetFramework)'">
    <PackageReference Include="Microsoft.Build.Framework" Version="$(MicrosoftBuildFrameworkVersion)" />
    <PackageReference Include="Microsoft.Build.Tasks.Core" Version="$(MicrosoftBuildTasksCoreVersion)" />
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="$(MicrosoftBuildUtilitiesCoreVersion)" />
    <!-- Manually updated version from 6.0.0 to address CVE-2021-43877 -->
    <PackageReference Include="System.Security.Cryptography.Xml" Version="$(RepoTasksSystemSecurityCryptographyXmlVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'net472'">
    <PackageReference Include="Microsoft.Signed.Wix" Version="$(MicrosoftSignedWixVersion)" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />

    <Reference Include="Microsoft.Build" />
    <Reference Include="Microsoft.Build.Framework" />
    <Reference Include="Microsoft.Build.Tasks.v4.0" />
    <Reference Include="Microsoft.Build.Utilities.v4.0" />
    <Reference Include="Microsoft.Deployment.WindowsInstaller">
      <HintPath>$(WiXSdkPath)\Microsoft.Deployment.WindowsInstaller.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.Deployment.WindowsInstaller.Package">
      <HintPath>$(WiXSdkPath)\Microsoft.Deployment.WindowsInstaller.Package.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <!--
      Reference base shared framework at incoming dependency flow version, not bundled sdk version.
      Apply this to all projects that target the default tfm (e.g. net8.0) or a rid-based variant of it (e.g. net8.0-windows)
    -->
    <FrameworkReference
      Update="Microsoft.NETCore.App"
      Condition=" (('$(ProjectTargetFrameworkIdentifier)' == '$(DefaultNetCoreTargetFramework)') AND '$(DefaultNetCoreTargetFramework)' == '$(ProjectTargetFrameworkVersion)') AND '$(TargetLatestDotNetRuntime)' != 'false' "
      RuntimeFrameworkVersion="$(MicrosoftNETCoreAppRuntimeVersion)"
      TargetingPackVersion="$(MicrosoftNETCoreAppRefVersion)" />

    <PackageReference Include="Microsoft.DotNet.ILCompiler"
      Condition=" '$(PublishAot)' == 'true' "
      Version="$(MicrosoftNETCoreAppRuntimeVersion)" />
  </ItemGroup>

  <ItemGroup>
    <!-- Use the same NETCore shared framework as repo built against except when building product code in servicing. -->
    <KnownFrameworkReference Update="Microsoft.NETCore.App">
      <LatestRuntimeFrameworkVersion
          Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftNETCoreAppRuntimeVersion)</LatestRuntimeFrameworkVersion>
      <TargetingPackVersion
          Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftNETCoreAppRefVersion)</TargetingPackVersion>
      <!--
        Change the default shared framework version only when _not_ servicing. Avoid bumping version used in most
        projects. When servicing, projects (Microsoft.AspNetCore.App.Runtime in particular) can use
        $(TargetLatestRuntimePatch) to explicitly control whether assemblies build against default (false) or
        latest (true). When that property is not set, SDK uses default metadata in most cases but published apps
        e.g. tool projects (again, property not set) use latest.
        On the other hand, $(TargetLatestDotNetRuntime) is specific to this repo and controls only the update below.
      -->
      <DefaultRuntimeFrameworkVersion Condition=" '$(IsServicingBuild)' != 'true' AND
          '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' AND
          '$(TargetLatestDotNetRuntime)' != 'false' ">$(MicrosoftNETCoreAppRuntimeVersion)</DefaultRuntimeFrameworkVersion>
      <RuntimePackRuntimeIdentifiers Condition=" '$(DotNetBuildSourceOnly)' == 'true' ">$(TargetRuntimeIdentifier)</RuntimePackRuntimeIdentifiers>
    </KnownFrameworkReference>

    <KnownAppHostPack Update="Microsoft.NETCore.App">
      <AppHostPackVersion Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftNETCoreAppRuntimeVersion)</AppHostPackVersion>
      <AppHostRuntimeIdentifiers Condition=" '$(DotNetBuildSourceOnly)' == 'true' ">$(TargetRuntimeIdentifier)</AppHostRuntimeIdentifiers>
    </KnownAppHostPack>

    <KnownRuntimePack Update="Microsoft.NETCore.App">
      <LatestRuntimeFrameworkVersion
        Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftNETCoreAppRuntimeVersion)</LatestRuntimeFrameworkVersion>
      <AppHostRuntimeIdentifiers Condition=" '$(DotNetBuildSourceOnly)' == 'true' ">$(TargetRuntimeIdentifier)</AppHostRuntimeIdentifiers>
    </KnownRuntimePack>

    <KnownWebAssemblySdkPack Update="Microsoft.NET.Sdk.WebAssembly.Pack">
      <WebAssemblySdkPackVersion
        Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftNETCoreAppRuntimeVersion)</WebAssemblySdkPackVersion>
    </KnownWebAssemblySdkPack>

    <KnownCrossgen2Pack Update="Microsoft.NETCore.App.Crossgen2" Condition=" '$(DotNetBuildSourceOnly)' == 'true' ">
      <Crossgen2PackVersion
          Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftNETCoreAppRuntimeVersion)</Crossgen2PackVersion>
      <Crossgen2RuntimeIdentifiers>$(TargetRuntimeIdentifier)</Crossgen2RuntimeIdentifiers>
    </KnownCrossgen2Pack>

    <!-- Use the just-built ASP.NET Core shared framework if available except when building product code in servicing. -->
    <KnownFrameworkReference Update="Microsoft.AspNetCore.App" Condition=" $(UpdateAspNetCoreKnownFramework) ">
      <LatestRuntimeFrameworkVersion
          Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftAspNetCoreAppRuntimeVersion)</LatestRuntimeFrameworkVersion>
      <RuntimePackRuntimeIdentifiers
          Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(SupportedRuntimeIdentifiers)</RuntimePackRuntimeIdentifiers>
      <!-- Do not update %(TargetingPackVersion) until X.Y.0 versions have been released. -->
      <TargetingPackVersion
          Condition=" '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' AND '$(AspNetCorePatchVersion)' != '1' ">$(MicrosoftAspNetCoreAppRefVersion)</TargetingPackVersion>
      <DefaultRuntimeFrameworkVersion Condition=" '$(IsServicingBuild)' != 'true' AND
          '%(TargetFramework)' == '$(DefaultNetCoreTargetFramework)' ">$(MicrosoftAspNetCoreAppRuntimeVersion)</DefaultRuntimeFrameworkVersion>
    </KnownFrameworkReference>
  </ItemGroup>
</Project>
